@page "/encrypt"
@using System.Security.Cryptography
@using System.Text

<div class="flex justify-center mt-10">
    <div class="w-full max-w-xl bg-white shadow-md rounded-lg p-8 space-y-8">

        <div class="text-center">
            <h1 class="text-3xl font-bold">🔐 Daten verschlüsseln & entschlüsseln</h1>
            <p class="text-gray-600 mt-2">Gib einen Text und ein Passwort ein – und verschlüssele oder entschlüssele die Daten lokal im Browser.</p>
        </div>

        <!-- Verschlüsselung -->
        <div class="space-y-4">
            <h2 class="text-xl font-semibold">Text verschlüsseln</h2>

            <div>
                <label class="block font-medium">Text eingeben:</label>
                <textarea class="w-full p-2 border rounded" rows="3" @bind="inputText"></textarea>
            </div>

            <div>
                <label class="block font-medium">Passwort:</label>
                <input class="w-full p-2 border rounded" type="password" @bind="password" />
            </div>

            <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded w-full" @onclick="EncryptText">🔐 Verschlüsseln</button>

            @if (!string.IsNullOrEmpty(encryptedText))
            {
                <div>
                    <label class="block font-medium">Verschlüsselter Text (Base64):</label>
                    <textarea class="w-full p-2 border rounded" rows="3" readonly>@encryptedText</textarea>
                </div>
            }
        </div>

        <hr />

        <!-- Entschlüsselung -->
        <div class="space-y-4">
            <h2 class="text-xl font-semibold">Text entschlüsseln</h2>

            <div>
                <label class="block font-medium">Verschlüsselten Text eingeben (Base64):</label>
                <textarea class="w-full p-2 border rounded" rows="3" @bind="cipherInput"></textarea>
            </div>

            <div>
                <label class="block font-medium">Passwort:</label>
                <input class="w-full p-2 border rounded" type="password" @bind="password" />
            </div>

            <button class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded w-full" @onclick="DecryptText">🔓 Entschlüsseln</button>

            @if (!string.IsNullOrEmpty(decryptedText))
            {
                <div>
                    <label class="block font-medium">Entschlüsselter Text:</label>
                    <textarea class="w-full p-2 border rounded" rows="3" readonly>@decryptedText</textarea>
                </div>
            }
        </div>
    </div>
</div>
<style>
    .encrypt-container {
        max-width: 600px;
        margin: 4rem auto;
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    .encrypt-title {
        text-align: center;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .encrypt-subtitle {
        text-align: center;
        color: #555;
        margin-bottom: 2rem;
    }

    .encrypt-section {
        margin-bottom: 2rem;
    }

    .encrypt-section h2 {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.3rem;
        font-weight: 500;
    }

    textarea, input[type="password"] {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 1rem;
        margin-bottom: 1rem;
        box-sizing: border-box;
    }

    button {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.2s ease;
    }

    .encrypt-btn {
        background-color: #2563eb;
        color: white;
    }

    .encrypt-btn:hover {
        background-color: #1d4ed8;
    }

    .decrypt-btn {
        background-color: #10b981;
        color: white;
    }

    .decrypt-btn:hover {
        background-color: #059669;
    }

    hr {
        border: none;
        border-top: 1px solid #ddd;
        margin: 2rem 0;
    }
</style>


@code {
    private string inputText = string.Empty;
    private string password = string.Empty;
    private string encryptedText = string.Empty;
    private string cipherInput = string.Empty;
    private string decryptedText = string.Empty;

    private void EncryptText()
    {
        if (string.IsNullOrWhiteSpace(inputText) || string.IsNullOrWhiteSpace(password))
            return;

        using var aes = Aes.Create();
        var key = SHA256.HashData(Encoding.UTF8.GetBytes(password));
        aes.Key = key;
        aes.GenerateIV();

        using var encryptor = aes.CreateEncryptor();
        var plainBytes = Encoding.UTF8.GetBytes(inputText);
        var cipherBytes = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);

        var combined = aes.IV.Concat(cipherBytes).ToArray();
        encryptedText = Convert.ToBase64String(combined);
    }

    private void DecryptText()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(cipherInput) || string.IsNullOrWhiteSpace(password))
                return;

            var combined = Convert.FromBase64String(cipherInput);
            var iv = combined.Take(16).ToArray();
            var cipherBytes = combined.Skip(16).ToArray();

            using var aes = Aes.Create();
            var key = SHA256.HashData(Encoding.UTF8.GetBytes(password));
            aes.Key = key;
            aes.IV = iv;

            using var decryptor = aes.CreateDecryptor();
            var plainBytes = decryptor.TransformFinalBlock(cipherBytes, 0, cipherBytes.Length);

            decryptedText = Encoding.UTF8.GetString(plainBytes);
        }
        catch
        {
            decryptedText = "❌ Fehler beim Entschlüsseln (falsches Passwort oder ungültiger Text)";
        }
    }
}
