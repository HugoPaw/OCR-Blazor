@page "/Hangman"
@inject HttpClient Http

<h3>Hangman</h3>

@if (!GameStarted)
{
    <p>Wähle die Anzahl Wörter:</p>

    <select @bind="SelectedWordCount">
        @for (int i = 5; i <= 12; i++)
        {
            <option value="@i">@i Wörter</option>
        }
    </select>

    <button @onclick="StartGame">Start</button>
    @if (Loading)
    {
        <p>Lade Wörter...</p>
    }
    @if (Error != null)
    {
        <p style="color:red;">Fehler beim Laden: @Error</p>
    }
}
else
{
    <p>Wort: @GetMaskedWord()</p>
    <p>Fehlversuche: @WrongGuesses / @MaxErrors</p>

    @if (!GameOver)
    {
        <input @bind="CurrentGuess" @bind:event="oninput" maxlength="1" />
        <button @onclick="GuessLetter">Rate</button>
    }
    else
    {
        <p>@(Won ? "Gewonnen!" : $"Verloren! Das Wort war: {Word}")</p>
        <button @onclick="ResetGame">Neues Spiel</button>
    }
}

@code {
    private List<string> WordPool = new();
    private string Word;
    private HashSet<char> GuessedLetters = new();
    private string CurrentGuess = "";
    private int WrongGuesses = 0;
    private const int MaxErrors = 6;
    private bool GameStarted = false;
    private int SelectedWordCount = 5;
    private bool Loading = false;
    private string Error;

    private bool GameOver => Won || Lost;
    private bool Won => Word.All(c => GuessedLetters.Contains(c));
    private bool Lost => WrongGuesses >= MaxErrors;

    private async Task StartGame()
    {
        GameStarted = false;
        Loading = true;
        Error = null;

        try
        {
            var url = $"https://random-word-api.herokuapp.com/word?number={SelectedWordCount}&lang=de";
            WordPool = await Http.GetFromJsonAsync<List<string>>(url);

            var rng = new Random();
            Word = WordPool[rng.Next(WordPool.Count)].ToLower();

            GuessedLetters.Clear();
            WrongGuesses = 0;
            CurrentGuess = "";
            GameStarted = true;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

        Loading = false;
        StateHasChanged();
    }

    private void GuessLetter()
    {
        if (string.IsNullOrWhiteSpace(CurrentGuess)) return;

        char guess = char.ToLower(CurrentGuess[0]);
        CurrentGuess = "";
        if (!char.IsLetter(guess) || GuessedLetters.Contains(guess)) return;

        GuessedLetters.Add(guess);
        if (!Word.Contains(guess))
            WrongGuesses++;
    }

    private string GetMaskedWord()
    {
        return string.Join(" ", Word.Select(c => GuessedLetters.Contains(c) ? c : '_'));
    }

    private void ResetGame()
    {
        GameStarted = false;
        Word = "";
        GuessedLetters.Clear();
        WrongGuesses = 0;
        CurrentGuess = "";
        SelectedWordCount = 5;
        Error = null;
    }
}
