@page "/ocr"
@inject BlazorProjekt.Services.OcrService OcrService
@using BlazorProjekt.Services

<h3>OCR Evaluation</h3>

<InputFile OnChange="HandleFileSelectedAsync" maxAllowedSize="15728640" /> <!-- 15 MB -->

<button type="button" @onclick="EvaluateFile" disabled="@(!isFileLoaded)">
    Evaluate
</button>

@if (!string.IsNullOrWhiteSpace(result))
{
    <div style="margin-top: 20px;">
        <p><strong>File ID:</strong> @OcrService.FileId</p>
        <p><strong>File Name:</strong> @OcrService.FileName</p>
        <p><strong>File Extension:</strong> @OcrService.FileEnding</p>
        <p><strong>OCR Method:</strong> @OcrService.OcrMethod</p>
        <p><strong>Evaluation Time:</strong> @OcrService.EvaluationTime?.ToString("yyyy-MM-dd HH:mm:ss")</p>
        <p><strong>Recognized Text:</strong></p>
        <pre>@result</pre>
    </div>
}
else if (isEvaluated && string.IsNullOrWhiteSpace(result))
{
    <div style="margin-top: 20px; color: red;">
        <strong>No text could be extracted or unsupported file type.</strong>
    </div>
}

@code {
    private string? result;
    private bool isFileLoaded = false;
    private bool isEvaluated = false;

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                Console.WriteLine("File selected: " + file.Name);
                await OcrService.LoadFileAsync(file);
                isFileLoaded = true;
                result = null;
                isEvaluated = false;
                StateHasChanged(); // Explicitly trigger UI update if needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading file: {ex.Message}");
            // Optionally set an error message for the user
        }
    }

    private void EvaluateFile()
    {
        Console.WriteLine("EvaluateFile triggered"); 
        result = OcrService.Evaluate();
        isEvaluated = true;
    }

}
