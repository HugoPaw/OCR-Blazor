@page "/wetter"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime JS

<div class="weather-container">
    <h3 class="weather-title">Wetter in Luzern</h3>

    @if (weatherData != null)
    {
        <div class="chart-container" style="height:300px;">
            <canvas id="weatherChart" width="400" height="250"></canvas>
        </div>

        <ul class="temperature-list">
            @for (int i = 0; i < Math.Min(weatherData.Hourly.Time.Count, weatherData.Hourly.Temperature2m.Count); i++)
            {
                var parsedTime = DateTime.Parse(weatherData.Hourly.Time[i]);
                <li class="temperature-item">
                    <span class="temperature-time">@parsedTime:dd.MM. HH:mm Uhr:</span>
                    <span class="temperature-value">@weatherData.Hourly.Temperature2m[i] °C</span>
                </li>
            }
        </ul>
    }
    else if (isError)
    {
        <div class="error-message">Fehler beim Laden der Wetterdaten. Bitte später erneut versuchen.</div>
    }
    else
    {
        <p class="loading-message">Wetterdaten werden geladen...</p>
    }
</div>

@code {
    private WeatherResponse? weatherData;
    private bool isError = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || weatherData != null) return;

        try
        {
            var url = "https://api.open-meteo.com/v1/forecast?latitude=47.05&longitude=8.31&hourly=temperature_2m";
            weatherData = await Http.GetFromJsonAsync<WeatherResponse>(url);

            if (weatherData?.Hourly?.Time != null && weatherData.Hourly.Temperature2m != null)
            {
                var labels = weatherData.Hourly.Time
                    .Take(24)
                    .Select(t => DateTime.Parse(t).ToString("HH:mm"))
                    .ToList();

                var values = weatherData.Hourly.Temperature2m.Take(24).ToList();

                await Task.Delay(300);
                await JS.InvokeVoidAsync("WETTER.drawWeatherChart", labels, values);
            }
            else
            {
                isError = true;
            }
        }
        catch
        {
            isError = true;
        }

        StateHasChanged();
    }

    public class WeatherResponse
    {
        [JsonPropertyName("hourly")]
        public Hourly Hourly { get; set; } = new();
    }

    public class Hourly
    {
        [JsonPropertyName("time")]
        public List<string> Time { get; set; } = new();

        [JsonPropertyName("temperature_2m")]
        public List<double> Temperature2m { get; set; } = new();
    }
}
